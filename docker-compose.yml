# Use .env file if it exists
x-use-audio-config: &use-audio-config
  env_file:
    - ${AUDIO_CONFIG_FILE:-config/audio_config.env}

services:
  audio-app:
    build: .
    # Use relative path with bind mounts for better cross-platform compatibility
    volumes:
      - ${AUDIO_INPUT_DIR:-./input}:/app/input
      - ${AUDIO_OUTPUT_DIR:-./output}:/app/output
      # Include platform-specific volume mappings
      - ${PULSE_SOCKET_VOLUME:-/run/user/1000/pulse:/run/user/1000/pulse:ro}
      - ${HOME_CONFIG_VOLUME:-${HOME}/.config/pulse:/root/.config/pulse:ro}
      - ${MACHINE_ID_VOLUME:-/etc/machine-id:/etc/machine-id:ro}
      # Cache directory for Whisper models
      - ${HOME}/.cache/whisper:/root/.cache/whisper
    # Only use devices when available (Linux/Pi)
    devices:
      - /dev/snd:/dev/snd
    # Privileged mode only if needed
    privileged: ${PRIVILEGED_MODE:-false}
    # Use audio config from platform_audio.sh
    <<: *use-audio-config
    environment:
      - AUDIO_INPUT_DIR=/app/input
      - AUDIO_OUTPUT_DIR=/app/output
      # Add platform detection env var (default is Raspberry Pi)
      - PLATFORM=${PLATFORM:-pi}
      # Audio driver from platform script
      - AUDIO_DRIVER=${AUDIO_DRIVER:-alsa}
      # PulseAudio server if available
      - PULSE_SERVER=${PULSE_SERVER:-}
      # Set Whisper model size for Pi (tiny is recommended for Pi)
      - WHISPER_MODEL=${WHISPER_MODEL:-tiny}

    # Don't automatically restart the container
    restart: "no"
    # Allow interactive use for recording
    tty: true
    stdin_open: true
    # Network mode depends on platform
    network_mode: ${NETWORK_MODE:-bridge}

# Define volumes to ensure they exist
volumes:
  input:
  output:

